
import logging
import asyncio
import os
import json
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

google_creds_raw = os.getenv("GOOGLE_CREDENTIALS_JSON")
if google_creds_raw:
    with open("credentials.json", "w") as f:
        json.dump(json.loads(google_creds_raw), f)

# --- Google Sheets setup ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME")
sheet = client.open(SPREADSHEET_NAME).sheet1

# --- Telegram bot setup ---
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

user_data = {}

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")]],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø - –ü–æ—á–µ–ª–∏–Ω—Ü–µ–≤ –ê–Ω–¥—Ä–µ–π üëã\n"
        "–¢–æ–∂–µ –∏–∑ –±–∏–∑–Ω–µ—Å–∞: –∫–æ–º–∞–Ω–¥–∞, –≤—ã—Ä—É—á–∫–∞, —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –í—Å—ë –∫–∞–∫ —É —Ç–µ–±—è!\n\n"
        "23 –∞–ø—Ä–µ–ª—è —è –≤—ã—Å—Ç—É–ø–∞—é –Ω–∞ IT-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –æ—Ç RASA.\n –•–æ—á—É, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª –Ω–µ –¥–æ–∫–ª–∞–¥ ¬´–ø—Ä–æ —É—Å–ø–µ—Ö¬ª,"
        "–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ –¥–µ–ª—É ‚Äî –ø—Ä–æ —Ç–æ, **—á—Ç–æ –±–æ–ª–∏—Ç** —É –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è.\n\n"
        "üîç –Ø —Å–¥–µ–ª–∞–ª —ç—Ç–æ—Ç –±–æ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∏–Ω–∏-–∞—É–¥–∏—Ç –∏ –ø–æ–Ω—è—Ç—å:\n"
        "–∫—Ç–æ —Ç—ã, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, –≥–¥–µ –±—É–∫—Å—É–µ—Ç —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å –∏ —á—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n"
        "5 –≤–æ–ø—Ä–æ—Å–æ–≤. 15 —Å–µ–∫—É–Ω–¥. –ê–Ω–æ–Ω–∏–º–Ω–æ. –ü–æ-—á–µ—Å—Ç–Ω–æ–º—É.\n\n"
        "–ì–æ—Ç–æ–≤? –ñ–º–∏ ¬´–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å¬ª üëá"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=start_keyboard)

# –í–æ–ø—Ä–æ—Å—ã
@dp.message(F.text == "–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def q1(message: types.Message):
    user_data[message.from_user.id] = {}
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¥–æ 25"), KeyboardButton(text="25-35")],
            [KeyboardButton(text="35-45"), KeyboardButton(text="45-55")],
            [KeyboardButton(text="—Å—Ç–∞—Ä—à–µ 55")]
        ],
        resize_keyboard=True
    )
    await message.answer("1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=keyboard)

@dp.message(F.text.in_(["–¥–æ 25", "25-35", "35-45", "45-55", "—Å—Ç–∞—Ä—à–µ 55"]))
async def q2(message: types.Message):
    user_data[message.from_user.id]["age"] = message.text
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–æ—Ä–≥–æ–≤–ª—è"), KeyboardButton(text="–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
            [KeyboardButton(text="–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"), KeyboardButton(text="–£—Å–ª—É–≥–∏")],
            [KeyboardButton(text="–ü—Ä–æ—á–µ–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("2Ô∏è‚É£ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å?", reply_markup=keyboard)

@dp.message(F.text.in_(["–¢–æ—Ä–≥–æ–≤–ª—è", "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–£—Å–ª—É–≥–∏", "–ü—Ä–æ—á–µ–µ"]))
async def q3(message: types.Message):
    user_data[message.from_user.id]["industry"] = message.text
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¥–æ 10"), KeyboardButton(text="11-30")],
            [KeyboardButton(text="31-100"), KeyboardButton(text="101 –∏ –±–æ–ª–µ–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("3Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ —à—Ç–∞—Ç–µ?", reply_markup=keyboard)

@dp.message(F.text.in_(["–¥–æ 10", "11-30", "31-100", "101 –∏ –±–æ–ª–µ–µ"]))
async def q4(message: types.Message):
    user_data[message.from_user.id]["staff"] = message.text
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¥–æ 1 –º–ª–Ω"), KeyboardButton(text="1-10 –º–ª–Ω")],
            [KeyboardButton(text="10-100 –º–ª–Ω"), KeyboardButton(text="100-500 –º–ª–Ω.")],
            [KeyboardButton(text="500-1.000 –º–ª–Ω"), KeyboardButton(text="–±–æ–ª—å—à–µ 1 –º–ª—Ä–¥.")]
        ],
        resize_keyboard=True
    )
    await message.answer("4Ô∏è‚É£ –û–±–æ—Ä–æ—Ç –±–∏–∑–Ω–µ—Å–∞ (–≤—ã—Ä—É—á–∫–∞)?", reply_markup=keyboard)

@dp.message(F.text.in_(["–¥–æ 1 –º–ª–Ω", "1-10 –º–ª–Ω", "10-100 –º–ª–Ω", "100-500 –º–ª–Ω.", "500-1.000 –º–ª–Ω", "–±–æ–ª—å—à–µ 1 –º–ª—Ä–¥."]))
async def q5(message: types.Message):
    user_data[message.from_user.id]["revenue"] = message.text
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–∞–¥—Ä—ã/HR"), KeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∏")],
            [KeyboardButton(text="–§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text="–ì–æ—Å.–ø–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –ò–ò")],
            [KeyboardButton(text="–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    user_data[message.from_user.id]["pain"] = []
    await message.answer("5Ô∏è‚É£ –ì–¥–µ –±–æ–ª–∏—Ç –∏–ª–∏ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç –±–æ–ª–µ—Ç—å?\n\n(–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª)", reply_markup=keyboard)

@dp.message(F.text.in_([
    "–ö–∞–¥—Ä—ã/HR", "–ü—Ä–æ–¥–∞–∂–∏", "–§–∏–Ω–∞–Ω—Å—ã", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–ì–æ—Å.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –ò–ò", "–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"
]))
async def select_pain(message: types.Message):
    uid = message.from_user.id
    pain_list = user_data[uid]["pain"]
    if message.text not in pain_list:
        pain_list.append(message.text)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text} (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë, –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª)", reply_markup=message.reply_markup)

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish(message: types.Message):
    uid = message.from_user.id
    answers = user_data.get(uid, {})
    pain = ", ".join(answers.get("pain", []))
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    sheet.append_row([
        str(uid),
        message.from_user.username or message.from_user.full_name,
        answers.get("age"),
        answers.get("industry"),
        answers.get("staff"),
        answers.get("revenue"),
        pain,
        now
    ])
    summary = (
    f"üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:*\n\n"
    f"üë§ –í–æ–∑—Ä–∞—Å—Ç: {answers.get('age')}\n"
    f"üè¢ –°—Ñ–µ—Ä–∞: {answers.get('industry')}\n"
    f"üë• –®—Ç–∞—Ç: {answers.get('staff')}\n"
    f"üí∞ –û–±–æ—Ä–æ—Ç: {answers.get('revenue')}\n"
    f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã: {pain}"
)

    await message.answer(summary, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! üôå\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ 23 –∞–ø—Ä–µ–ª—è.",
        parse_mode="Markdown"
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
